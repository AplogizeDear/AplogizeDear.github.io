<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>能文能武小小莱</title>
  
  <subtitle>Never give up!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-14T02:15:22.437Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>张强</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="http://example.com/2021/08/14/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://example.com/2021/08/14/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2021-08-14T09:19:22.000Z</published>
    <updated>2021-08-14T02:15:22.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="8月13号"><a href="#8月13号" class="headerlink" title="8月13号"></a>8月13号</h2><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><p> 这个要从js中的数据类型说起，js中数据类型分为<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var new_arr &#x3D; JSON.parse( JSON.stringify(arr) );</span><br></pre></td></tr></table></figure><p>是一个简单粗暴的好方法，就是有一个问题，不能拷贝函数。</p><p>如果想要精确的深层次拷贝那就是递归复制。</p><p>浅拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shallowCopy = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 只拷贝对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 根据obj的类型判断是新建一个数组还是对象</span></span><br><span class="line">    <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="comment">// 遍历obj，并且判断是obj的属性才拷贝</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            newObj[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            newObj[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> ? deepCopy(obj[key]) : obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有大致一个递归了解一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">5</span>)) <span class="comment">// 5 * 4 * 3 * 2 * 1 = 120  阶乘为例</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">2</span> ? n : fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">5</span>)) <span class="comment">// 1 1 2 3 5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;8月13号&quot;&gt;&lt;a href=&quot;#8月13号&quot; class=&quot;headerlink&quot; title=&quot;8月13号&quot;&gt;&lt;/a&gt;8月13号&lt;/h2&gt;&lt;h3 id=&quot;深拷贝和浅拷贝&quot;&gt;&lt;a href=&quot;#深拷贝和浅拷贝&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客板块分类遐想</title>
    <link href="http://example.com/2021/08/14/index/"/>
    <id>http://example.com/2021/08/14/index/</id>
    <published>2021-08-14T02:15:22.433Z</published>
    <updated>2021-08-14T02:15:22.437Z</updated>
    
    <content type="html"><![CDATA[<h4 id="博客名"><a href="#博客名" class="headerlink" title="博客名"></a>博客名</h4><p>能文能武小小菜：文能妙笔生花，武能妙手码代码。和我的公众号一摸一样的。</p><h4 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h4><p>   考虑了三个，以下</p><ol><li><p>广积粮，缓称王</p></li><li><p>Never give uo！</p></li><li><p>临渊羡鱼，不如退而结网</p><p>第一个想着是积累各种软硬技能，然后向着目标奔发。第二个是英文，永不放弃，有点装的意思，哈哈。第三个，与其羡慕别人比你强。不如想着如何为实现这个目标积蓄力量。都挺好。但是，暂时选了第二个。</p></li></ol><h4 id="博客板块分类"><a href="#博客板块分类" class="headerlink" title="博客板块分类"></a>博客板块分类</h4><h5 id="知识板块"><a href="#知识板块" class="headerlink" title="知识板块"></a>知识板块</h5><p>​    这一板块打算写自己的硬性技能，比如说 javascript、计算机网络、数据结构、算法、Vue、React相关的知识。以及平时工作碰到的问题，以及解决方案。将会在这里持续更新。或许在文章逐渐多起来的时候，再做个分类</p><h5 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h5><p>​    这一板块会写一些平时的一些感悟和想法。或许是想到什么写什么！</p><h5 id="读书一角"><a href="#读书一角" class="headerlink" title="读书一角"></a>读书一角</h5><p>​    这一板块会写平时阅读过的书，我想小说也是可以的。比如说《雪中悍刀行》《剑来》之类的。书籍目录放在这里也行。《javascript高级程序设计》 《你所不知道的js全三册》《失控》《百年孤独》《霍乱时期的爱情》《如何阅读一本书》《影响力》《放风筝的人》《不能承受的生命之轻》《人性的弱点》《影响力》《墨菲定律》《人类简史》《人格心理学》《自私的基因》《娱乐至死》《平凡的世界》《原则》《穷爸爸富爸爸系列图书》。随着阅读记录会持续更新的。</p><h5 id="人在职场"><a href="#人在职场" class="headerlink" title="人在职场"></a>人在职场</h5><p>​    这一板块，准备写一些跟同事在一起所碰到的各种各样的事情。文中的名字肯定不会以真名的形似出现。所以大家放心好了。你的名字肯定不会出现在上面的。</p><h5 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h5><p>​    虽然去过的地方不是很多。但是有些地方你所看见的你一处景色真的让人流连忘返。所以也是可以记录一下的。</p><h5 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h5><p>​    这一板块东西不会太多的。因为会涉及自己的隐私。这个板块的东西只会出现在我的日记里。后期如果没有的话，这个板块应该会删除。</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>​    是对这些文章模块的统计</p><h5 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h5><p>​    暂时没想好写什么。先放着。预留了一些板块。工作附带学车篇、LOL篇、buy篇、小说篇 、有想写小说的意思，哈哈，也有这个一个构想。再想想。自我推销篇、电商模式篇、吉他学习 乐理篇？这个真的好难坚持，这个从小就得学习。弹的手有点疼。后面如果有的话再加吧。</p><p>​    </p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;博客名&quot;&gt;&lt;a href=&quot;#博客名&quot; class=&quot;headerlink&quot; title=&quot;博客名&quot;&gt;&lt;/a&gt;博客名&lt;/h4&gt;&lt;p&gt;能文能武小小菜：文能妙笔生花，武能妙手码代码。和我的公众号一摸一样的。&lt;/p&gt;
&lt;h4 id=&quot;副标题&quot;&gt;&lt;a href=&quot;#副标题</summary>
      
    
    
    
    <category term="博客建立构想" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%9E%84%E6%83%B3/"/>
    
    
    <category term="博客建立构想" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%9E%84%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>javascrit事件循环机制</title>
    <link href="http://example.com/2021/08/12/javascrit%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2021/08/12/javascrit%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/</id>
    <published>2021-08-12T11:46:42.000Z</published>
    <updated>2021-08-14T02:15:22.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="8月12号"><a href="#8月12号" class="headerlink" title="8月12号"></a>8月12号</h2><h3 id="JavaScript执行机制"><a href="#JavaScript执行机制" class="headerlink" title="JavaScript执行机制"></a>JavaScript执行机制</h3><h4 id="关于javascript"><a href="#关于javascript" class="headerlink" title="关于javascript"></a>关于javascript</h4><p>​    Javascript是一门单线程语言，所有的多线程都是通过单线程模拟出来的333</p><h4 id="javascript-事件循环"><a href="#javascript-事件循环" class="headerlink" title="javascript 事件循环"></a>javascript 事件循环</h4><ol><li>同步任务</li><li>异步任务</li></ol><p>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</p><p>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</p><p>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</p><p>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    task()</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">10000000</span>)</span><br></pre></td></tr></table></figure><p><code>setTimeout</code>这个函数，是经过指定时间后，把要执行的任务(本例中为<code>task()</code>)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</p><p><code>setTimeout(fn,0)</code>的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。</p><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h4><p><code>setInterval</code>会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。一旦**<code>setInterval</code>的回调函数<code>fn</code>执行时间超过了延迟时间<code>ms</code>，那么就完全看不出来有时间间隔了**。</p><h3 id="Promise与process-nextTick-callback"><a href="#Promise与process-nextTick-callback" class="headerlink" title="Promise与process.nextTick(callback)"></a>Promise与process.nextTick(callback)</h3><p>宏任务 和 微任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;console&#x27;</span>);</span><br></pre></td></tr></table></figure><p>时间循环机制 先执行宏任务再执行微任务再执行宏任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   <span class="comment">//宏任务 setTimeout1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">//微任务 process2</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)  </span></span><br><span class="line"><span class="function">        <span class="title">console</span>.<span class="title">log</span>(<span class="params"><span class="string">&#x27;4&#x27;</span></span>)</span>;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   <span class="comment">//微任务 then2</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">//微任务 process1   一轮 执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;      <span class="comment">//微任务 then1  一轮 执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    <span class="comment">// 宏任务 setTimeout2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;9&#x27;</span>);  </span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   <span class="comment">// 微任务process3</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   <span class="comment">//微任务 then3</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>宏任务Event Queue</th><th>微任务Event Queue</th></tr></thead><tbody><tr><td></td><td>setTimeout1</td><td>process1</td></tr><tr><td></td><td>setTimeout2</td><td>then1</td></tr></tbody></table><p>第一轮 宏任务   1   7  微任务    6  8</p><table><thead><tr><th>宏任务Event Queue</th><th>微任务Event Queue</th></tr></thead><tbody><tr><td>setTimeout1</td><td>process2</td></tr><tr><td></td><td>then2</td></tr></tbody></table><p>第二轮 宏任务 2  4  微任务 3 5   </p><table><thead><tr><th>宏任务Event Queue</th><th>微任务Event Queue</th></tr></thead><tbody><tr><td>setTimeout2</td><td>process3</td></tr><tr><td></td><td>then3</td></tr></tbody></table><p>第三轮  宏任务 9   11  微任务 10  12</p><p>三次循环 1 7 6 8 2 4 3  5 9 11 10 12</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ol><li>js 是一门单线程语言，所有的异步都是同步模拟的</li><li>事件循环是js实现异步的一种方法，也是js的执行机制</li><li>执行js因环境不同而不同 运行js是指javascript解析引擎</li><li>javascript是一门单线程语言</li><li>Event Loop是javascript的执行机制</li></ol><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;8月12号&quot;&gt;&lt;a href=&quot;#8月12号&quot; class=&quot;headerlink&quot; title=&quot;8月12号&quot;&gt;&lt;/a&gt;8月12号&lt;/h2&gt;&lt;h3 id=&quot;JavaScript执行机制&quot;&gt;&lt;a href=&quot;#JavaScript执行机制&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="知识" scheme="http://example.com/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>图片测试</title>
    <link href="http://example.com/2021/03/26/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2021/03/26/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</id>
    <published>2021-03-26T17:38:38.000Z</published>
    <updated>2021-08-14T02:15:22.437Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/03/26/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/butiful.jpeg" class="" title="This is an example image"><img src="/2021/03/26/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/butifuln.jpeg" class="" title="This is an example image">]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2021/03/26/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/butiful.jpeg&quot; class=&quot;&quot; title=&quot;This is an example image&quot;&gt;

&lt;img src=&quot;/2021/03/26/%</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>回流和重绘</title>
    <link href="http://example.com/2020/12/14/%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98/"/>
    <id>http://example.com/2020/12/14/%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98/</id>
    <published>2020-12-14T21:18:06.000Z</published>
    <updated>2021-08-14T02:15:22.437Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前面</strong></p><ol><li>浏览器使用流式布局模型 (Flow Based Layout)。</li><li>浏览器会把<code>HTML</code>解析成<code>DOM</code>，把<code>CSS</code>解析成<code>CSSOM</code>，<code>DOM</code>和<code>CSSOM</code>合并就产生了<code>Render Tree</code>。</li><li>有了<code>RenderTree</code>，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。</li><li>由于浏览器使用流式布局，对<code>Render Tree</code>的计算通常只需要遍历一次就可以完成，但<code>table</code>及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用<code>table</code>布局的原因之一。</li><li><strong>一句话：回流必将引起重绘，重绘不一定会引起回流。</strong></li></ol><p><strong>回流</strong></p><p>当<code>Render Tree</code>中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p><p>会导致回流的操作：</p><ul><li><p>页面首次渲染</p></li><li><p>浏览器窗口大小发生改变</p></li><li><p>元素尺寸或位置发生改变</p></li><li><p>元素内容变化（文字数量或图片大小等等）</p></li><li><p>元素字体大小变化</p></li><li><p>添加或者删除<strong>可见</strong>的<code>DOM</code>元素</p></li><li><p>激活<code>CSS</code>伪类（例如：<code>:hover</code>）</p></li><li><p>查询某些属性或调用某些方法</p></li><li><p>一些常用且会导致回流的属性和方法：</p><ul><li><code>clientWidth</code>、<code>clientHeight</code>、<code>clientTop</code>、<code>clientLeft</code></li><li><code>offsetWidth</code>、<code>offsetHeight</code>、<code>offsetTop</code>、<code>offsetLeft</code></li><li><code>scrollWidth</code>、<code>scrollHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code></li><li><code>scrollIntoView()</code>、<code>scrollIntoViewIfNeeded()</code></li><li><code>getComputedStyle()</code></li><li><code>getBoundingClientRect()</code></li><li><code>scrollTo()</code></li></ul></li></ul><p><strong>重绘</strong></p><p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：<code>color</code>、<code>background-color</code>、<code>visibility</code>等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p><p><strong>性能影响</strong></p><p><strong>回流比重绘的代价要更高。</strong></p><p>有时即使仅仅回流一个单一的元素，它的父元素以及任何跟随它的元素也会产生回流。</p><p>现代浏览器会对频繁的回流或重绘操作进行优化：</p><p>浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。</p><p>当你访问以下属性或方法时，浏览器会立刻清空队列：</p><ul><li><code>clientWidth</code>、<code>clientHeight</code>、<code>clientTop</code>、<code>clientLeft</code></li><li><code>offsetWidth</code>、<code>offsetHeight</code>、<code>offsetTop</code>、<code>offsetLeft</code></li><li><code>scrollWidth</code>、<code>scrollHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code></li><li><code>width</code>、<code>height</code></li><li><code>getComputedStyle()</code></li><li><code>getBoundingClientRect()</code></li></ul><p>因为队列中可能会有影响到这些属性或方法返回值的操作，即使你希望获取的信息与队列中操作引发的改变无关，浏览器也会强行清空队列，确保你拿到的值是最精确的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;前面&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器使用流式布局模型 (Flow Based Layout)。&lt;/li&gt;
&lt;li&gt;浏览器会把&lt;code&gt;HTML&lt;/code&gt;解析成&lt;code&gt;DOM&lt;/code&gt;，把&lt;code&gt;CSS&lt;/code&gt;解析成</summary>
      
    
    
    
    <category term="知识" scheme="http://example.com/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="html css" scheme="http://example.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2</title>
    <link href="http://example.com/2020/11/09/iTerm2/"/>
    <id>http://example.com/2020/11/09/iTerm2/</id>
    <published>2020-11-09T20:41:41.000Z</published>
    <updated>2021-08-14T02:15:22.433Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装iTerm2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom&#x2F;cask</span><br><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure></li><li><p>终端背景配色</p><p>默认配色为xterm-256color（共有七种），位置在 iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Terminal，应该满足不了爱美的你。我们补充一下配色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~&#x2F;.iterm2 &amp;&amp; cd ~&#x2F;.iterm2</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;mbadolato&#x2F;iTerm2-Color-Schemes</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;.iterm2&#x2F;iTerm2-Color-Schemes $ ls -la   &#x2F;&#x2F;查看~&#x2F;.iterm2的目录结构</span><br></pre></td></tr></table></figure><p>导入配色iTerm2-Color-Schemes目录下的配色，全部选中导入</p></li><li><p>安装字体 字体链接: <a href="https://github.com/ryanoasis/nerd-fonts">https://github.com/ryanoasis/nerd-fonts</a></p><p>这里说俩种方式,这俩中我分别在一款15寸mac和16寸mac试了一下</p><ol><li><p>这种方式是丫的真的慢。半个小时的样子吧！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew&#x2F;cask-fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure></li><li><p>我通过这种方式安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;Library&#x2F;Fonts &amp;&amp; curl -fLo &quot;Droid Sans Mono for Powerline Nerd Font Complete.otf&quot; https:&#x2F;&#x2F;github.com&#x2F;ryanoasis&#x2F;nerd-fonts&#x2F;raw&#x2F;master&#x2F;patched-fonts&#x2F;DroidSansMono&#x2F;complete&#x2F;Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf</span><br></pre></td></tr></table></figure></li></ol></li><li><p>修改字体</p><p>文件位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Font -&gt; Change Font</span><br><span class="line">Text 下面勾选 Use a different font for non-ASCII text</span><br></pre></td></tr></table></figure><p>通过第三步中的第一种方式安装，请使用 Hack Nerd Font</p><p>通过第三步中的第二种方式安装，请使用 </p><p>Droid-Sans-Mono-Nerd-Font-Complete.otf</p></li><li><p>安装zsh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br><span class="line">sudo sh -c &quot;echo $(which zsh) &gt;&gt; &#x2F;etc&#x2F;shells&quot;</span><br><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure></li><li><p>配置zsh </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure></li><li><p>打开 ~/.zshrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ~&#x2F;.zshrc  &#x2F;&#x2F;默认主题是ZSH_THEME&#x3D;&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure></li><li><p>有个颜值比较高的主题. /Users/mac/.oh-my-zsh/custom/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;bhilburn&#x2F;powerlevel9k.git ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;themes&#x2F;powerlevel9k</span><br></pre></td></tr></table></figure></li><li><p>修改第七部中的主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME&#x3D;&quot;powerlevel9k&#x2F;powerlevel9k&quot;</span><br><span class="line"></span><br><span class="line">source ~&#x2F;.zshrc（修改之后用这个命令让其生效）</span><br></pre></td></tr></table></figure></li><li><p>我这里 iTerm2 的代码配色选择的是：Dracula</p></li><li><p>其他配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POWERLEVEL9K_MODE&#x3D;&quot;nerdfont-complete&quot;  &#x2F;&#x2F;设置 powerlevel9k 的字体是我们前面下载的</span><br><span class="line"># Customise the Powerlevel9k prompts </span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS&#x3D;(ssh dir vcs newline status) &#x2F;&#x2F;将前面居右的几个元素放在左边了</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS&#x3D;()  &#x2F;&#x2F;右边不放置任何元素（如果你喜欢在右边也可以加）</span><br><span class="line">POWERLEVEL9K_PROMPT_ADD_NEWLINE&#x3D;true    &#x2F;&#x2F;在每个提示之前添加换行符</span><br></pre></td></tr></table></figure></li><li><p>安装过程中遇到的问题！！</p><ol><li><p>git clone  速度缓慢?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">github.global.ssl.fastly.net &#x2F;&#x2F;199.232.69.194</span><br><span class="line">github.com  &#x2F;&#x2F;140.82.113.3</span><br></pre></td></tr></table></figure></li><li><p>sudo vim /etc/hosts</p></li><li><p>hosts文件末尾添加映射</p><ol><li>按键字母”i”进入编辑模式，添加下面俩行</li><li>按”ESC“按键退出编辑模式</li><li>输入”:wq”保存并推出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">199.232.69.194 github.global-ssl.fastly.net</span><br><span class="line">140.82.113.3 github.com</span><br></pre></td></tr></table></figure></li><li><p>保存DNS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dscacheutil -flushcache</span><br></pre></td></tr></table></figure></li><li><p>试过之后好闲还是有点慢，丫的</p><p>但是关闭iTerm2重新启动一下的时候好像变快了。</p></li><li><p>第四步中的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dscacheutil -q host -a name github.com &#x2F;&#x2F;检测网址的iP地址</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dscacheutil -flushcache  &#x2F;&#x2F;网址https:&#x2F;&#x2F;ss64.com&#x2F;osx&#x2F;dscacheutil.html：一堆英文巴拉巴拉</span><br><span class="line">Flush the entire cache. This should only be used in extreme cases.Validation information is used within the cache along with other techniques to ensure the OS has valid information available to it.</span><br><span class="line">翻译：刷新整个缓存，这个命令被用于极端的情况，验证信息与其他信息一起在缓存中使用，确保操作系统具有有效信息的技术可用。</span><br></pre></td></tr></table></figure></li><li><p>参考：<a href="https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html">https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html</a></p></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装iTerm2&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="知识" scheme="http://example.com/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="iTerm2主题配置" scheme="http://example.com/tags/iTerm2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>javascript</title>
    <link href="http://example.com/2020/11/07/javascript/"/>
    <id>http://example.com/2020/11/07/javascript/</id>
    <published>2020-11-07T16:27:08.000Z</published>
    <updated>2021-08-14T02:15:22.437Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总结来自红宝书《javascript高级程序设计》"><a href="#总结来自红宝书《javascript高级程序设计》" class="headerlink" title="总结来自红宝书《javascript高级程序设计》"></a>总结来自红宝书《javascript高级程序设计》</h3><p>  光说不练假把式！</p><ol><li><h4 id="javascript语言简介"><a href="#javascript语言简介" class="headerlink" title="javascript语言简介"></a>javascript语言简介</h4><p>javascript是一种解释型的脚本语言，目的是能够在客户端的网页中增加<strong>动态效果</strong>和<strong>交互能力</strong></p><p>总的来说分为三部分</p><p>ECMAscript 核心 -  主要处理一些语句语法类型关键字之类的东西</p><p>BOM 浏览器对象模型  暴露出一些API来操作浏览器 比如说滑动，弹框，视口大小</p><p>DOM  文档对象模型   暴露出来API用来处理dom元素</p></li><li><h4 id="script-标签"><a href="#script-标签" class="headerlink" title="script 标签"></a>script 标签</h4><p>属性：1. src   2. type  默认text/javascript   3.async 立即执行脚本 但是不妨碍界面中的其他操作   defer 文档全部解析和显示完执行</p><p>多个外链js脚本在没有async和defer的情况下会照常执行。</p></li><li><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h5><p>​    3.1.1 区分大小写</p><p>​    3.1.2 标识符 变量、函数、属性的名字  多采用驼峰命名（firstName）</p><p>​    3.1.3 严格模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dosomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h5><ol><li><p>ECMAscript的变量是一种松散型的，也就是说他的变量可以用来保存任何类型的数据。每个变量仅仅表示的是一个占位符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message;</span><br></pre></td></tr></table></figure><p>Var 表示的是操作符，像这样没有赋值的占位符都会存一个值为undefined</p></li><li><p>数据类型</p><p>五种简单数据基本类型:null String undefined boolean Number </p><p>一种复杂基本数据类型：object 或则Null</p><p>因为变量比较松散，所以需要通过一个标识符来确定类型：typeof</p></li><li><p>null   </p><p>空对象指针 typeof null = object</p><p>如果未来打算保存对象，那么这个值可以初始化为null</p></li><li><p>String</p><p>字符串特点：一经创建，他的值就不能在改变，如果想要改变某个变量保存的字符串，首先要销毁原来的字符串。然后用新的字符串来填充该变量</p><p>toString(); 接受一个参数，指定进制，可输出进制格式表示的任意进制值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> ageString = age.toString() <span class="comment">//&quot;11&quot;</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num.toString(<span class="number">2</span>); <span class="comment">//&quot;1010&quot;</span></span><br><span class="line"><span class="keyword">var</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> foundString = found.toString() <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="5"><li><p>undefined  未经初始化的值默认会取得undefined,这个值重来就不会用来进行显式的声明</p></li><li><p>Number </p><p>isFinite() 函数，用来确认一个数值是否是无穷的</p><p>isNaN() 判断一个值是否是NaN</p><p>Number()  把各种数据类型转换为数值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">Number</span>(<span class="string">&quot;hello&quot;</span>);  <span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">Number</span>(<span class="string">&quot;&quot;</span>);  <span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">Number</span>(<span class="string">&quot;000111&quot;</span>); <span class="comment">//111</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>parseInt() 第二个参数可以指定基数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;123blue&quot;</span>);  <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;&quot;</span>);  <span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">&quot;0XA&quot;</span>); <span class="comment">//10</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><p>parseFloat()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>); <span class="comment">//22.5</span></span><br></pre></td></tr></table></figure></li><li><p>boolean</p></li><li><p>object</p><p>对象，一组数据和功能的集合</p><p>object的每个实例都具有下列属性和方法</p><ol><li>constructor 保存用于创建对象的函数</li><li>o.hasOwnProperty(“name”); 用于检索对象中是和否有该属性。</li></ol><h5 id="3-4-操作符"><a href="#3-4-操作符" class="headerlink" title="3.4 操作符"></a>3.4 操作符</h5><p>​    一元操作符  </p><p>​        递增递减操作符(++、–) </p><p>​        一元加减操作符(主要用于转换正负)</p><p>​    布尔操作符 ！&amp;&amp;  ||</p><p>​    乘性操作符 * /  %</p><p>​    加性操作符 + -</p><p>​    关系操作符 &gt;    &lt;    &gt;=    &lt;=    </p><p>​    相等操作符  ==     !=    ===      !==</p><p>​    条件操作符    var max = num1 &gt; num2 ? num1:num2;</p><h5 id="3-5-语句-（流控制语句）"><a href="#3-5-语句-（流控制语句）" class="headerlink" title="3.5 语句 （流控制语句）"></a>3.5 语句 （流控制语句）</h5><p>​    if语句</p><p>​    do-while 语句</p><p>​    while 语句</p><p>​    for 语句。</p><p>​    for-in语句 用来遍历对象中的所有属性</p><p>​    switch 语句</p><p>​    label语句（没有使用过）</p><h5 id="3-6-函数"><a href="#3-6-函数" class="headerlink" title="3.6 函数"></a>3.6 函数</h5></li><li><p>参数</p><p>ECMA中的参数是用数组表示的。命名的参数知识提供便利，并不是必须的。</p><p>可以通过arguments来访问函数传递进来的参数。注意一点，这种情况，通过严格模式是没有用的。</p><p>函数重复命名之后，只会执行最后一个。（不会重载）</p><h5 id="3-7-变量作用于和内存问题"><a href="#3-7-变量作用于和内存问题" class="headerlink" title="3.7 变量作用于和内存问题"></a>3.7 变量作用于和内存问题</h5><p>​    javascript的变量是一个松散的值，他不会保存变量的数据类型，因此，在生命周期当中可能在某个时刻发生变化。Ts</p><p>的出现正是以为这个原因。</p></li><li><p>基本数据类型和引用基本类型</p><p>基本：undefined null number string boolean。这五种数据类型是按值访问，可以操作保存在变量中的实际的值。</p><p>引用：引用类型的值是保存在内存中的对象。Javascript不能直接操作对象的内存空间。是操作对象的时候，实际上是在控制对象的应用。</p><ol><li><p>动态的属性</p><p>基本：不可添加属性</p><p>引用：可以添加属性和方法</p></li><li><p>复制变量值</p><p>基本：复制后会在内存空间重新定义一个值，俩者完全独立</p><p>引用：复制后的值的副本实际上是一个指针，这个值指针指向堆内存中的一个对象。俩个变量使用的是一个对象。</p></li><li><p>传递参数</p><p>ECMAscript中的值都是通过值去传递的</p><p>基本：把函数外部的值赋值给函数内部，也就是所谓的arguments</p><p>引用：会把这个值在内存中的地址复制给一个局部变量，去最原始的引用不会发生变化</p></li><li><p>检测类型</p><p>typeof检测基本数据类型 string number boolean undefined，除了null和object</p><p>instaneof 检测引用的基本类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">personal <span class="keyword">instanceof</span> <span class="built_in">Object</span>;</span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>;</span><br><span class="line">reg <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行环境及其作用域</p><ol><li>执行环境：执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。</li><li>变量对象：环境中定义的变量和函数都保存在这个对象中。</li><li>全局执行环境：window对象，所有的全局变量和函数都是作为window对象的属性和方法创建的</li><li>每个函数都有自己的执行环境，当一个函数执行的时候，这个函数的执行环境会被压入一个环境栈中，当函数执行完毕之后。栈将其环境弹出，把控制权返回给外层的环境</li><li>作用域链：保证对执行环境有权访问的所有变量和函数的有序访问</li></ol></li></ol></li></ol><p>   ​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;总结来自红宝书《javascript高级程序设计》&quot;&gt;&lt;a href=&quot;#总结来自红宝书《javascript高级程序设计》&quot; class=&quot;headerlink&quot; title=&quot;总结来自红宝书《javascript高级程序设计》&quot;&gt;&lt;/a&gt;总结来自红宝书《jav</summary>
      
    
    
    
    <category term="知识" scheme="http://example.com/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="js基础" scheme="http://example.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>割韭菜，资本家的游戏</title>
    <link href="http://example.com/2020/11/06/gejiucai/"/>
    <id>http://example.com/2020/11/06/gejiucai/</id>
    <published>2020-11-06T23:08:56.000Z</published>
    <updated>2021-08-14T02:15:22.433Z</updated>
    
    <content type="html"><![CDATA[<p>话说，有这么一个故事</p><p>从前有一片叫做工作的农田。在这片叫做工作的农田上种着一种菜，那就是韭菜。</p><p>韭菜在工作的农田里长的非常慢，它们从小就被施加一种叫做读书的肥料。这种肥料加的越多，小韭菜以后长得就会越快。</p><p>但是有一家叫做治本的农民，觉得小韭菜还能长的更快，于是就盖起了叫做加班的大棚，有一匹马给它改了个好听的名字”996大棚”。有了”996大棚”韭菜们就开始日以继夜生长，但是有一些小韭菜受不了这么多肥料和”996大棚”的照料很快就枯萎了。</p><p>当韭菜到了一定高度以后，治本家的农民就要开始收割一片片高大的韭菜了，可是治本家的农民没有劳动工具，于是他们磨了一把叫做商品房的镰刀，这把镰刀非常锋利所到之处，寸菜不留。只剩下一些矮小的韭菜幸免于难。</p><p>而现在治本家的农民又磨了几把镰刀，有叫做球鞋的镰刀，有叫做豪车的镰刀，还有叫作河里捞的镰刀。这一下所有的大韭菜，小韭菜都被收割干干净净，但是还有一些坚挺的小韭菜留在菜地上，于是治本家的农民又不知从哪里拿了几块磨刀石，做球鞋文化的磨刀石、有房才是家的磨刀石，给镰刀磨的锃亮锃亮的，坚挺的小韭菜也被一同收割了。</p><p>经过几次收割过后，已经没有多少高大的韭菜了，但是治本家的农民偶然间发现，有那么几棵大韭菜居然捅破了996的大棚，无论治本家的农民怎么割都割不倒，直到有一天这颗韭菜居然动了起来，跳出了大地，摇身一变，变成了一个农民，他也进入了治本家，和那些农民成了一家人，也开始开开心心的割起了其他刚刚长大的韭菜们。诺大个世界，就是这么被割来割去的。</p><p>刚从大学出来的，似乎都很听话。因为从小父母就告诉你，努力就有回报，找了个刚起步的公司做实习生，月薪2500，每天加班到凌晨一点，我和他说这工资配不上你这么卖命吧？ 他说这很正常，他们xx圈就是这样，我TM服了？？我问他被剥削正常？？？他说，这就是完成本职工作呀，怎么就剥削了呢？服了 ，让他们继续，劝不住的，你要跟我说你年入百万也就算了，实习生？？？2500？？？凌晨一点下班？？？周末还加班。为啥要顶着这么大的压力，真的很不理解。</p><p>我不是说读书没有什么用，只是想让你了解和意识到，奴性这种东西，一旦习惯了，就再也摘不下来了。结合穷爸爸富爸爸那本书。贪婪和恐惧真真正正都是需要你去克服的东西。这样你能少被割韭菜。当然，更希望你这只韭菜，能跳出这个大棚，毕竟有人在努力，有人在享受。你会成为那个割韭菜的人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;话说，有这么一个故事&lt;/p&gt;
&lt;p&gt;从前有一片叫做工作的农田。在这片叫做工作的农田上种着一种菜，那就是韭菜。&lt;/p&gt;
&lt;p&gt;韭菜在工作的农田里长的非常慢，它们从小就被施加一种叫做读书的肥料。这种肥料加的越多，小韭菜以后长得就会越快。&lt;/p&gt;
&lt;p&gt;但是有一家叫做治本的农民，</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="如何跳出被割韭菜的命运" scheme="http://example.com/tags/%E5%A6%82%E4%BD%95%E8%B7%B3%E5%87%BA%E8%A2%AB%E5%89%B2%E9%9F%AD%E8%8F%9C%E7%9A%84%E5%91%BD%E8%BF%90/"/>
    
  </entry>
  
  <entry>
    <title>我在拼多多上面买了一台macbookPro笔记本</title>
    <link href="http://example.com/2020/11/05/buyMac/"/>
    <id>http://example.com/2020/11/05/buyMac/</id>
    <published>2020-11-05T22:58:13.000Z</published>
    <updated>2021-08-14T02:15:22.433Z</updated>
    
    <content type="html"><![CDATA[<h5 id="姑且称之为理由"><a href="#姑且称之为理由" class="headerlink" title="姑且称之为理由"></a>姑且称之为理由</h5><ol><li><p>平时可以外出写写文章之类</p></li><li><p>想在自己的电脑上写写项目</p></li><li><p>很想有一台自己的macbookPro，因为在上面写字很舒服，敲代码也很舒服。</p></li><li><p>常天对着电脑，是时候给自己投资一波。是赚还是亏就要看后面这台电脑能帮我做到哪一步。</p></li><li><p>之前也搭建过博客，但是呢，因为是台式机，太古板。或许换了这台笔记本。能坚持做一些事情。虽然说，哈哈，都是借口，但是确实想把之前的东西捡起来。而且有时候在听到比我见解比我深的人的话的时候。内心有那么些感触的时候，确实想把这些整理成文章给记录下来。</p><p>写这个的时候我的博客已经搭建完毕 hexo + github + Travis-ci(自动构建)。当然，是根据官方的教程一步一步来的。我提一下，提交的是master分支。travis会自动帮你构建到你设置为默认的分支上的。不在使用hexo -g这样的命令去发布。</p></li><li><p>买电脑的感觉越来越强烈。没次有感而发在公司的电脑上写写画画的时候。就想着如果是自己的电脑就好了。不再迟疑了，上车了。</p></li><li><p>一直也有点犹豫，要不要把公司的电脑换成自己的电脑。但是怕折腾这台电脑。公司那台电脑先折腾着吧。等把他折腾的熟悉了，自己的电脑配置一步到位。</p></li></ol><h5 id="谈谈使用至今的感受"><a href="#谈谈使用至今的感受" class="headerlink" title="谈谈使用至今的感受"></a>谈谈使用至今的感受</h5><p>综上2020.11.1号我的电脑回来了。来自拼多多，16寸 macbookpro16g + 512g。回来之前是没有任何感觉的，我竟然能睡得着，直到回来之后在验证他是否是正品的时候，心里七上八下的。结果三码合一，电池循环次数一次。对了，还给苹果官网打了个电话来着，查了下这个序列号，个人觉得算是安全下车。</p><p>大概用到11.5号，说说使用mac的感受，拿到手的时候我先下载了网易云，音质上面真没得说。接下来就是安装各种软件。翻墙用的是河对岸的服务。谷歌，微信等等。然后才使用了brew去安装东西。docker还有一些开发用的东西，后面我会继续慢慢补充。不错的，比某东便宜了三千块。真香！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;姑且称之为理由&quot;&gt;&lt;a href=&quot;#姑且称之为理由&quot; class=&quot;headerlink&quot; title=&quot;姑且称之为理由&quot;&gt;&lt;/a&gt;姑且称之为理由&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;平时可以外出写写文章之类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;想在自己的电脑上写写项</summary>
      
    
    
    
    <category term="macBook Pro" scheme="http://example.com/categories/macBook-Pro/"/>
    
    
    <category term="macbookPro" scheme="http://example.com/tags/macbookPro/"/>
    
  </entry>
  
  <entry>
    <title>纷繁世界，抖音的认识</title>
    <link href="http://example.com/2020/11/04/douyin/"/>
    <id>http://example.com/2020/11/04/douyin/</id>
    <published>2020-11-04T22:02:21.000Z</published>
    <updated>2021-08-14T02:15:22.433Z</updated>
    
    <content type="html"><![CDATA[<p>​    抖音上的短视频，很少能提出让人目耳一新的意见。它们往往只是殊途同归地在重复某个群体想要实现的愿望，比如有求必应的伴侣，慷慨大方的闺蜜……某些愚蠢的愿望，却被不断地拿来重复，并获得高赞，只不过是一群持一样想法的笨蛋找到组织，在此一拍即合。</p><p>​    当某个作者某个平台的观念的输出，永远只会让我们觉得一拍即合，通体舒泰，我们应该对此保持谨惕。某些观念输出永远停在我们思维的舒适区，它们不能引领你，只会麻醉你，在那里呆久了，我们原本有的弱点和愚蠢会被强化。真正的学习和成长永远是痛苦的自我蜕变、辛苦的逆流而上。</p><p>​    聪明人知道世界很大，自己所知甚少。愿意包容不同的人和意见，有能力学习和改变自己，不断通过输入进步的信息来更新自己的观念。笨蛋认为自己早已经无所不知，永远是对的，他们不想改变自己，只想在网上找到同类的意见来支持自己。他们看到和自己不合的异见，只会勃然大怒，然后进行攻击。所以他们在抖音如鱼得水，因为抖音用算法很好保护他们的固执的无知不受冒犯。</p><p>​    苦没有真正苦过，爱没有用力爱过。每天接受信息大潮的冲击，三观未定却又倍受曲折。贫穷不再是正义，有妄图不让金钱成为唯一的追求。过早看到了更大的世界，勤奋却又不过三天。热血透不过键盘和屏幕，回忆止于游戏和高考。像一群没有根的孩纸，在别人额经历和精神里吵闹。</p><p>​    这些年我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天只睡几小时，多久没放假了，如果这些东西也值得夸耀，那么富士康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。</p><p>​    抖音字节跳动都已卸载许久。自勉，加油！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    抖音上的短视频，很少能提出让人目耳一新的意见。它们往往只是殊途同归地在重复某个群体想要实现的愿望，比如有求必应的伴侣，慷慨大方的闺蜜……某些愚蠢的愿望，却被不断地拿来重复，并获得高赞，只不过是一群持一样想法的笨蛋找到组织，在此一拍即合。&lt;/p&gt;
&lt;p&gt;​    当</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="抖音认知" scheme="http://example.com/tags/%E6%8A%96%E9%9F%B3%E8%AE%A4%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>《穷爸爸富爸爸》笔记记载</title>
    <link href="http://example.com/2020/11/03/poorandrice/"/>
    <id>http://example.com/2020/11/03/poorandrice/</id>
    <published>2020-11-03T20:17:48.000Z</published>
    <updated>2021-08-14T02:15:22.437Z</updated>
    
    <content type="html"><![CDATA[<h4 id="穷爸爸，富爸爸"><a href="#穷爸爸，富爸爸" class="headerlink" title="穷爸爸，富爸爸"></a>穷爸爸，富爸爸</h4><h5 id="真正的学习"><a href="#真正的学习" class="headerlink" title="真正的学习"></a>真正的学习</h5><ol><li>真正的学习需要精力，激情，和热切的愿望。激情是愤怒和热爱的结合物。</li></ol><h5 id="大多数人都是出于对钱的恐惧而努力工作"><a href="#大多数人都是出于对钱的恐惧而努力工作" class="headerlink" title="大多数人都是出于对钱的恐惧而努力工作"></a>大多数人都是出于对钱的恐惧而努力工作</h5><ol><li><p>说到大多数人，他们很少有挣钱的激情，只有没钱的恐惧，这逼迫着他们去挣钱。</p></li><li><p>他们感到没钱的恐惧，于是去工作，希望钱能消除恐惧，但钱不可能消除恐惧。于是，恐惧追逐着他们，他们只好又去工作，希望钱能消除恐惧，但还是无法摆脱恐惧。恐惧使他们落入工作的陷阶，挣钱——工作——挣钱，希望有一天能消除恐惧。但每天他们起床时，就会发现恐惧又同他们一起醒来了。恐惧使成千上万的人彻夜难眠，忧心忡忡。所以他们又起床去工作了，希望薪水能杀死那该死的恐惧。钱主宰着他们的生活，他们拒绝去分辨真相，钱控制了他们的情感和灵魂。</p></li><li><p>驴子在拼命拉车，因为车夫在它鼻子前面放了个胡萝卜。车夫知道该把车驶到哪里，而驴却只是在追逐一个幻觉。但第二天驴依旧会去拉车，因为又有胡萝卜放在了驴子的面前。</p></li></ol><h5 id="对买房子的看法"><a href="#对买房子的看法" class="headerlink" title="对买房子的看法"></a>对买房子的看法</h5><ol><li><p>对于房子，我要指出大多数人一生都在为一所他们并未真正拥有的房子而辛苦地工作。换句话说，大多数人每隔几年就买所新房子，每次都用一份新的30年期的贷款偿还上一笔的贷款。</p></li><li><p>即使人们从住房抵押贷款的利息中得到了免税的好处，他们还是要先还清各期贷款后，才能以税后收入支付各种开支。</p></li><li><p>财产税。我妻子的父母每月要为他们的房子交纳高达100O美元的财产税，这是他们退休后要交的一项税款，这种税赋使他们的日子很紧张，他们时常感到要被迫搬离了。</p></li><li><p>房子的价值并不总是上升。1997年，我的一位朋友有所价值1百万美元的房子，而今天他的这所房子只值70万美元了。</p></li><li><p>最大的损失是机会损失。如果你所有的钱都被投在了房子上，你就不得不努力工作，因为你的现金正不断地从支出项流出，而不是流人资产项，这是典型的中产阶级现金流模式。正确的做法应该是怎样的呢？如果一对年轻夫妇早点在他们的资产项中多投些钱，以后几年他们就会过得轻松些，尤其是他们准备把孩子送人大学的话。因为资产项中的投资会使他们的资产不断增加，自动弥补支出。而先投资买下一所大房子的做法只不过是取得抵押贷款以支付不断攀升的开支，其结果不过是拆了东墙补西墙。</p></li></ol><h5 id="决定拥有很昂贵的房子，将对一个人的财务生活在以下三个方面形成冲击"><a href="#决定拥有很昂贵的房子，将对一个人的财务生活在以下三个方面形成冲击" class="headerlink" title="决定拥有很昂贵的房子，将对一个人的财务生活在以下三个方面形成冲击"></a>决定拥有很昂贵的房子，将对一个人的财务生活在以下三个方面形成冲击</h5><ol><li>失去了用其他资产增值的时机。</li><li>本可以用来投资的资本将用于支付房子的各种高额、长期开支。</li><li>失去受教育机会。人们经常把他们的房子、储蓄和退休金计划列入他们的资产项目。</li></ol><h5 id="对财富的理解"><a href="#对财富的理解" class="headerlink" title="对财富的理解"></a>对财富的理解</h5><ol><li>财富就是支持一个人生存多长时间的能力，或者说如果我今天停止工作，我还能活多久？</li><li>资产就是把钱放进你口袋的东西，负债就是把钱从你口袋里面拿走的东西</li><li>财富是将资产项下产生的现金流与支出项下流出的现金流进行比较而定的。</li><li>关于钱，最妙的是能让它一天24小时地工作并且为你的几代人服务。记住：作个努力工作的雇员，确保你的工作，但要不断构筑你的资产项。</li></ol><h5 id="所谓资产"><a href="#所谓资产" class="headerlink" title="所谓资产"></a>所谓资产</h5><ol><li>不需我到场就可以正常运作的业务。我拥有它们，但由别人经营和管理。如果我必须在那儿工作，那它就不是我的事业而是我的职业了；</li><li> 股票；</li><li>债券；</li><li>共同基金；5.产生收入的房地产；6.票据（借据）；7.专利权如音乐、手稿、专利；8.任何其他有价值、可产生收入或可能增值并且有很好的流通市场的东西。</li></ol><h5 id="如何致富"><a href="#如何致富" class="headerlink" title="如何致富"></a>如何致富</h5><ol><li><p>比如说我的资产每月可产生1000美元，当我每月从资产项可得2000美元时，那我就有财富了。如果我想增加支出，我首先必须增加资产项产生的现金流来维持我的财富水平。注意，这时我不再依赖工资，如果我辞职了，我每月还能用资产项产生的现金流维持支出，也就是说我仍能够生存。流入资产项的钱越多，资产就增加得越快；资产增加得越快，现金流入得就越多。只要我把支出控制在资产所能够产生的现金流之下，我就会变富，就会有越来越多除我自身劳动力收入之外的其他收入来源。</p><h6 id="读了前三章，这俩章暂时还用不到。如：《税收的历史和公司的力量》《富人的投资》"><a href="#读了前三章，这俩章暂时还用不到。如：《税收的历史和公司的力量》《富人的投资》" class="headerlink" title="读了前三章，这俩章暂时还用不到。如：《税收的历史和公司的力量》《富人的投资》"></a>读了前三章，这俩章暂时还用不到。如：《税收的历史和公司的力量》《富人的投资》</h6></li></ol><h5 id="不为挣钱而工作"><a href="#不为挣钱而工作" class="headerlink" title="不为挣钱而工作"></a>不为挣钱而工作</h5><ol><li>工作的意义就是 ‘比破产强一点’</li><li>工人付出最高限度的努力工作以避免被解雇，而雇主提供最低限度的工资以防止工人辞职。年轻人在寻找工作时要看看能从中学到什么，而不是只看能挣到多少。</li><li>一旦人们为支付生活的账单而整天疲于奔命，就和那些蹬着小铁笼子不停转圈的小老鼠一样了。老鼠的小毛腿蹬得飞快，小铁笼也转得飞快，可到了第二天早上醒来，他们发现自己依然困在老鼠笼里。</li><li>“你每天忙碌的目的是什么？”就像那只从不停歇的小老鼠一样，我想知道人们是否会想一想这样辛苦工作，到头来究竟是为了什么？未来的日子又该怎么过呢？</li><li>成功所必要的管理素质包括：1.对现金流的管理；2.对系统（包括你本人、时间及家庭）的管理；3.对人员的管理。</li><li>但他们不善于与其他人进行更多的交流去发挥他们的天赋，结果他们挣的钱少得可怜。我建议他们花一年时间来学习销售，即使什么也没挣到，可他们处理人际关系的能力会大大提高，而这种能力是无价的。</li></ol><p><strong>总结：</strong></p><ol><li>人不应该为了挣钱而努力的工作，而是通过这份工作带给了你怎样的知识和价值，顺便为自己的生活带来了微薄的收入，毕竟你不应该认为你的时间就值这么点钱。抱着这样的态度。你这一生应该不会太缺钱的。</li><li>一份工作解决不了长期的问题。</li><li>分清楚你的负债和资产，把钱放入你口袋的叫做资产，拿出去的就叫负债。</li><li>作个努力工作的雇员，确保你的工作，但要不断构筑你的资产项。</li><li>现在有这个意识，但是怎样让资产在手上产生现金流呢！！</li></ol><p>​    </p><p>​     </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;穷爸爸，富爸爸&quot;&gt;&lt;a href=&quot;#穷爸爸，富爸爸&quot; class=&quot;headerlink&quot; title=&quot;穷爸爸，富爸爸&quot;&gt;&lt;/a&gt;穷爸爸，富爸爸&lt;/h4&gt;&lt;h5 id=&quot;真正的学习&quot;&gt;&lt;a href=&quot;#真正的学习&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="读书一角" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E4%B8%80%E8%A7%92/"/>
    
    
    <category term="关于理财" scheme="http://example.com/tags/%E5%85%B3%E4%BA%8E%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="http://example.com/2020/11/02/git/"/>
    <id>http://example.com/2020/11/02/git/</id>
    <published>2020-11-02T23:04:12.000Z</published>
    <updated>2021-08-14T02:15:22.433Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>工作了很久，总结一下自己经常用到的命令，拓展一下不知道的git命令</p><p>常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git add .   (添加所有文件到缓存区)</span><br><span class="line">git commit -m &#39;你的描述&#39; （提交暂存区到仓库区）</span><br><span class="line">git push &#39;你要提交的分支代码&#39; （提交代码到远程）</span><br><span class="line"></span><br><span class="line">git remote -v 查看远程仓库</span><br><span class="line"></span><br><span class="line">git branch -a  查看所有分支</span><br><span class="line"></span><br><span class="line">git checkout -b &#39;分支&#39;   建立一个分支，并且切换到新建的分支</span><br><span class="line"></span><br><span class="line">git checkout &#39;分支&#39;  切换到某个已经有的分支</span><br><span class="line"></span><br><span class="line">git merge &#39;分支&#39;  将分支代码合并到当前工作的分支</span><br><span class="line"></span><br><span class="line">git status  查看当前状态</span><br><span class="line"></span><br><span class="line">git fetch [remote]  下载远程仓库的所有变动</span><br></pre></td></tr></table></figure><p>以上就是经常用到的git命令</p></li><li><p>学一些不常用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//分支</span><br><span class="line">git branch [branch-name]  新建一个分支，但是还停留在当前分支</span><br><span class="line">git branch -r   列出所有远程分支</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">git branch -d [branch-name]  删除本地分支</span><br><span class="line">git push origin --delete [branch-name]  删除远程分支</span><br><span class="line"></span><br><span class="line">// 查看</span><br><span class="line">git shortlog -sn    查看所有提交过代码的人，按照提交次数排序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">撤销</span><br><span class="line">git reset [commit]  重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line"></span><br><span class="line">git reset --hard [commit]   同时重置暂存区和工作区，与指定commit一致</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>大多数公司在提交的时候会设置上传的eslint检测，其实这个就是代码提交规范，涉及到了git，在这里写一下。作用嘛就是有利于快速查找到某个版本</p><p>3.1 一般是 <strong>git commit -m ‘feat:做了什么样子的功能’</strong>  其他的类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">公式：&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line"></span><br><span class="line">feat：新功能（feature）</span><br><span class="line">fix：修补bug</span><br><span class="line">docs：文档（documentation）</span><br><span class="line">style： 格式（不影响代码运行的变动）</span><br><span class="line">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">test：增加测试</span><br><span class="line">chore：构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure><h6 id="3-2-项目中使用"><a href="#3-2-项目中使用" class="headerlink" title="3.2 项目中使用"></a>3.2 项目中使用</h6><p><code>validate-commit-msg</code>  来检查项目中 <code>Commit message</code> 是否规范。</p><ol><li><pre><code>npm install --save-dev validate-commit-msg<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 方式一：建立 &#96;.vcmrc&#96; 文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>&#123;  &quot;types&quot;: [&quot;feat&quot;, &quot;fix&quot;, &quot;docs&quot;, &quot;style&quot;, &quot;refactor&quot;, &quot;perf&quot;, &quot;test&quot;, &quot;build&quot;, &quot;ci&quot;, &quot;chore&quot;, &quot;revert&quot;],  &quot;scope&quot;: &#123;    &quot;required&quot;: false,    &quot;allowed&quot;: [&quot;*&quot;],    &quot;validate&quot;: false,    &quot;multiple&quot;: false  &#125;,  &quot;warnOnFail&quot;: false,  &quot;maxSubjectLength&quot;: 100,  &quot;subjectPattern&quot;: &quot;.+&quot;,  &quot;subjectPatternErrorMsg&quot;: &quot;subject does not match subject pattern!&quot;,  &quot;helpMessage&quot;: &quot;&quot;,  &quot;autoFix&quot;: false&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 使用方式二：写入 &#96;package.json&#96;</span><br><span class="line"></span><br></pre></td></tr></table></figure>&#123;  &quot;config&quot;: &#123;    &quot;validate-commit-msg&quot;: &#123;      /* your config here */    &#125;  &#125;&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. &#96;validate-commit-msg&#96; 插件地址</span><br><span class="line"></span><br><span class="line">   https:&#x2F;&#x2F;github.com&#x2F;conventional-changelog-archived-repos&#x2F;validate-commit-msg</span><br><span class="line"></span><br><span class="line">5. ghooks 钩子</span><br><span class="line"></span><br></pre></td></tr></table></figure>&#123;  …  &quot;config&quot;: &#123;    &quot;ghooks&quot;: &#123;      &quot;pre-commit&quot;: &quot;gulp lint&quot;,      &quot;commit-msg&quot;: &quot;validate-commit-msg&quot;,      &quot;pre-push&quot;: &quot;make test&quot;,      &quot;post-merge&quot;: &quot;npm install&quot;,      &quot;post-rewrite&quot;: &quot;npm install&quot;,      …    &#125;  &#125;  …&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6. ###### 生成 Change log</span><br><span class="line"></span><br></pre></td></tr></table></figure>npm install -g conventional-changelogcd jartto-domoconventional-changelog -p angular -i CHANGELOG.md -w<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">为了方便使用，可以将其写入 &#96;package.json&#96; 的 &#96;scripts&#96; 字段。</span><br><span class="line"></span><br></pre></td></tr></table></figure>&#123;  &quot;scripts&quot;: &#123;    &quot;changelog&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;  &#125;&#125;npm run changelog</code></pre></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;工作了很久，总结一下自己经常用到的命令，拓展一下不知道的git命令&lt;/p&gt;
&lt;p&gt;常用命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    <category term="知识" scheme="http://example.com/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="git使用" scheme="http://example.com/tags/git%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>homebrew使用</title>
    <link href="http://example.com/2020/11/02/homebrew/"/>
    <id>http://example.com/2020/11/02/homebrew/</id>
    <published>2020-11-02T22:29:04.000Z</published>
    <updated>2021-08-14T02:15:22.433Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h5 id="附上homeBrew的官方链接"><a href="#附上homeBrew的官方链接" class="headerlink" title="附上homeBrew的官方链接"></a>附上homeBrew的官方链接</h5><p><a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a></p></li><li><h5 id="安装homeBrew"><a href="#安装homeBrew" class="headerlink" title="安装homeBrew"></a>安装homeBrew</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure></li><li><h5 id="使用Homebrew-安装-你的mac没有预装但你需要的东西，如果想要安装应用要用下面那条命令哦"><a href="#使用Homebrew-安装-你的mac没有预装但你需要的东西，如果想要安装应用要用下面那条命令哦" class="headerlink" title="使用Homebrew 安装 你的mac没有预装但你需要的东西，如果想要安装应用要用下面那条命令哦"></a>使用Homebrew 安装 你的mac没有预装但你需要的东西，如果想要安装应用要用下面那条命令哦</h5><p>比如：brew install wget</p><p>​            brew install git</p><p>wget：用来下载文件的。可以控制下载文件的进度，比较稳定。</p><p>基本上不会丢包，有些网站只有专门的代理才可以下载，相信wget可以帮到你。</p></li><li><h5 id="用brew-cask-安装应用"><a href="#用brew-cask-安装应用" class="headerlink" title="用brew cask 安装应用"></a>用brew cask 安装应用</h5><p>Brew cask 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install  brew-cask </span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew cask install firefox</span><br><span class="line">brew cask install qq</span><br></pre></td></tr></table></figure><p>更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew cask outdated  列出需要更新的软件</span><br><span class="line"></span><br><span class="line">brew cask install --force &lt;outdated-cask&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="什么？homebrew安装很慢！！"><a href="#什么？homebrew安装很慢！！" class="headerlink" title="什么？homebrew安装很慢！！"></a>什么？homebrew安装很慢！！</h4><p>清华大学有个镜像，可以换成这个。</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p></li></ol><p>   这是另一篇教程<a href="https://juejin.im/post/6850418117194022919">https://juejin.im/post/6850418117194022919</a></p><p>   简单概述为</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;brew.git</span><br><span class="line">cd &quot;$(brew --repo)&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core&quot;</span><br><span class="line">git remote set-url origin https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;homebrew-core.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>   这里有个一个命令解决下载缓慢的问题</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;zsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure><p>   在你的mac终端跑一下就可以了，时间可能比较长。</p><ol start="6"><li><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;zsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;HomebrewUninstall.sh)&quot;</span><br></pre></td></tr></table></figure></li><li><p>实在不会安装了</p><p><a href="https://zhuanlan.zhihu.com/p/111014448">https://zhuanlan.zhihu.com/p/111014448</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;附上homeBrew的官方链接&quot;&gt;&lt;a href=&quot;#附上homeBrew的官方链接&quot; class=&quot;headerlink&quot; title=&quot;附上homeBrew的官方链接&quot;&gt;&lt;/a&gt;附上homeBrew的官方链接&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="知识" scheme="http://example.com/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="homebrew" scheme="http://example.com/tags/homebrew/"/>
    
  </entry>
  
</feed>
